import React, { useState } from "react";
import styles from "./ReviewsSlider.module.css";
import { useLanguage } from "../context/LanguageContext";
import { translations } from "../context/translations";

const reviews = [
  {
    name: "–í–∞—Å–∏–ª—å –ö–æ–≤–∞–ª–µ–Ω–∫–æ",
    role: "–í–ª–∞—Å–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω—É",
    city: "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞",
    text: "–î—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ —Å–∞–π—Ç–æ–º! –í—Å–µ –∑—Ä–æ–±–∏–ª–∏ –≤—á–∞—Å–Ω–æ —ñ –Ω–∞–≤—ñ—Ç—å —Ä–∞–Ω—ñ—à–µ. –ó—Ä—É—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ —Ç–∞ –∫—Ä–∞—Å–∏–≤–æ!",
    stars: 5,
  },
  {
    name: "–û–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    role: "–ü—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å",
    city: "–õ—å–≤—ñ–≤, –£–∫—Ä–∞—ó–Ω–∞",
    text: "–°–∞–π—Ç –≤–∏–π—à–æ–≤ —á—É–¥–æ–≤–∏–π, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é–≤–∞–ª–∞ —à–≤–∏–¥–∫–æ —Ç–∞ —è–∫—ñ—Å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
    stars: 5,
  },
  {
    name: "–û–ª–µ–Ω–∞2 –ü–µ—Ç—Ä–æ–≤–∞",
    role: "–ü—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å",
    city: "–õ—å–≤—ñ–≤, –£–∫—Ä–∞—ó–Ω–∞",
    text: "–°–∞–π—Ç –≤–∏–π—à–æ–≤ —á—É–¥–æ–≤–∏–π, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é–≤–∞–ª–∞ —à–≤–∏–¥–∫–æ —Ç–∞ —è–∫—ñ—Å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
    stars: 5,
  },
  {
    name: "–û–ª–µ–Ω–∞3 –ö–∞—Ä–∞–≤–∞–Ω",
    role: "–ü—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å",
    city: "–õ—å–≤—ñ–≤, –£–∫—Ä–∞—ó–Ω–∞",
    text: "–°–∞–π—Ç –≤–∏–π—à–æ–≤ —á—É–¥–æ–≤–∏–π, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é–≤–∞–ª–∞ —à–≤–∏–¥–∫–æ —Ç–∞ —è–∫—ñ—Å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
    stars: 5,
  },
];

interface ReviewsSliderProps {
  slidesToShow?: number;
}

export default function ReviewsSlider({
  slidesToShow = 2,
}: ReviewsSliderProps) {
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–ª–∞–π–¥–æ–≤ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
  const [visibleSlides, setVisibleSlides] = useState(slidesToShow);

  const [index, setIndex] = useState(0);
  const [fade, setFade] = useState<"in" | "outLeft" | "outRight" | null>(null);
  const [pendingIndex, setPendingIndex] = useState<number | null>(null);
  const { language } = useLanguage();
  const t = translations[language];
  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å —Å–ª–∞–π–¥–µ—Ä —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫
  const clampIndex = (i: number) => {
    const len = reviews.length;
    return ((i % len) + len) % len;
  };

  const prev = () => {
    setFade("outLeft");
    setPendingIndex(clampIndex(index - visibleSlides));
    setTimeout(() => {
      setIndex((prev) => clampIndex(prev - visibleSlides));
      setFade("in");
      setTimeout(() => {
        setFade(null);
        setPendingIndex(null);
      }, 450);
    }, 450);
  };
  const next = () => {
    setFade("outRight");
    setPendingIndex(clampIndex(index + visibleSlides));
    setTimeout(() => {
      setIndex((prev) => clampIndex(prev + visibleSlides));
      setFade("in");
      setTimeout(() => {
        setFade(null);
        setPendingIndex(null);
      }, 450);
    }, 450);
  };

  // –ü–æ–ª—É—á–∏—Ç—å visibleSlides –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
  const getVisible = (customIndex = index) => {
    const arr = [];
    for (let i = 0; i < visibleSlides; ++i) {
      arr.push(reviews[clampIndex(customIndex + i)]);
    }
    return arr;
  };

  const visibleReviews =
    pendingIndex !== null && (fade === "outLeft" || fade === "outRight")
      ? getVisible(index)
      : getVisible(pendingIndex !== null ? pendingIndex : index);

  return (
    <section className={styles.reviewsSection}>
      <div className={styles.headerRow}>
        <div className={styles.arrows}>
          <button className={styles.arrowBtn} onClick={prev} aria-label="Prev">
            ‚Üê
          </button>
          <button className={styles.arrowBtn} onClick={next} aria-label="Next">
            ‚Üí
          </button>
        </div>
        <p className={styles.title}>{t["reviews.title"]}</p>
      </div>
      <div className={styles.sliderRow}>
        {visibleReviews.map((review, i) => (
          <div
            className={
              styles.reviewCard +
              (fade === "outLeft"
                ? " " + styles.fadeOutLeft
                : fade === "outRight"
                ? " " + styles.fadeOutRight
                : fade === "in"
                ? " " + styles.fadeIn
                : "")
            }
            key={i}
          >
            <div className={styles.cardHeader}>
              <span className={styles.name}>{review.name}</span>
              <span className={styles.role}>{review.role}</span>
              <span className={styles.stars}>
                {"‚òÖ".repeat(review.stars)}
                {"‚òÜ".repeat(5 - review.stars)}
              </span>
            </div>
            <div className={styles.city}>
              <span role="img" aria-label="geo">
                üìç
              </span>{" "}
              {review.city}
            </div>
            <div className={styles.text}>{review.text}</div>
          </div>
        ))}
      </div>
      <div className={styles.dots}>
        {Array.from({ length: Math.ceil(reviews.length / visibleSlides) }).map(
          (_, dotIdx) => {
            const isActive = dotIdx === Math.floor(index / visibleSlides);
            return (
              <span
                key={dotIdx}
                className={isActive ? styles.dotActive : styles.dot}
                onClick={() => {
                  if (isActive) return;
                  const target = dotIdx * visibleSlides;
                  if (target > index) {
                    setFade("outRight");
                  } else {
                    setFade("outLeft");
                  }
                  setPendingIndex(target);
                  setTimeout(() => {
                    setIndex(target);
                    setFade("in");
                    setTimeout(() => {
                      setFade(null);
                      setPendingIndex(null);
                    }, 450);
                  }, 450);
                }}
                style={{ cursor: isActive ? "default" : "pointer" }}
              ></span>
            );
          }
        )}
      </div>
    </section>
  );
}
